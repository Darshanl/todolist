{"version":3,"sources":["serviceWorker.js","AddToList.js","ToDosItem.js","ToDos.js","App.js","reducer.js","index.js","constants.js"],"names":["Boolean","window","location","hostname","match","AddToList","_ref","addChange","textChange","keyPressed","react_default","a","createElement","className","type","onChange","onKeyPress","name","placeholder","onClick","ToDosItem","title","chChange","done","user","delTodo","completed","id","textDecoration","backgroundColor","style","bind","ToDos","todoslist","map","i","src_ToDosItem_0","key","val","App","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","ontextChange","e","setState","searchField","target","value","newTodo","state","length","concat","toConsumableArray","checkChange","todo","filter","src_AddToList_0","src_ToDos","Component","initialState","logger","createLogger","store","createStore","arguments","undefined","action","assign","payload","applyMiddleware","ReactDOM","render","es","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.59d0dd4d.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\r\nimport './AddToList.css';\r\n\r\nconst AddToList = ({addChange, textChange,keyPressed}) => {\r\n    return(\r\n        <div className=\"pa2\">\r\n            <input type='text' onChange={textChange} onKeyPress={keyPressed}\r\n            name='searchField'\r\n            className=\"pa1 b--none bg-light-gray\"\r\n            placeholder=\"Add..\"\r\n            />\r\n            <button onClick = {addChange}\r\n            className=\"btn pa1 bw1 b--none bg-light-red\">\r\n                Add To List\r\n            </button>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default AddToList; ","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport './ToDosItem.css'\r\n\r\nconst ToDosItem = ({title,chChange,done,user,delTodo}) => {\r\n\r\n    const{completed,id} = user;\r\n\r\n    done = () => {\r\n        return {\r\n            textDecoration: completed ? 'line-through' : 'none',\r\n            backgroundColor: completed ? '#785F69' : '#fff'\r\n        }\r\n    }\r\n\r\n    return(\r\n        <div className='tl'>\r\n            <p className=\"bg-light-gray bl bw2 mw8 center b--gray pa2 ma1\" style={done()}>\r\n                <input onChange={chChange.bind(this , id)}\r\n                type=\"checkbox\"\r\n                className=\"mr2\"\r\n                />\r\n                {title}\r\n                <button className=\"delete b--none\"\r\n                onClick={delTodo.bind(this, id)}>\r\n                Delete</button>\r\n            </p>\r\n        </div>\r\n    );\r\n}\r\n\r\n\r\nToDosItem.propTypes = {\r\n    user: PropTypes.object.isRequired\r\n}\r\n\r\nexport default ToDosItem; ","import React from 'react';\r\nimport ToDosItem from './ToDosItem';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst ToDos = ({done,todoslist,chChange,delTodo}) => {\r\n\r\n    return(\r\n        <div>\r\n            {\r\n                todoslist.map((user,i) => {\r\n                    return (\r\n                        <ToDosItem \r\n                            key={i} \r\n                            title={user.title}\r\n                            id={user.val}\r\n                            chChange={chChange}\r\n                            delTodo={delTodo}\r\n                            user={user}\r\n                            done={done}\r\n                        />\r\n                    )\r\n                })\r\n            }\r\n        </div>\r\n    );\r\n\r\n}\r\n\r\nToDos.propTypes = {\r\n    todoslist: PropTypes.array.isRequired\r\n}\r\n\r\n\r\n\r\nexport default ToDos; ","import React, {Component} from 'react';\r\nimport './App.css';\r\nimport AddToList from './AddToList';\r\nimport ToDos from './ToDos';\r\n\r\nclass App extends Component{\r\n    constructor(){\r\n        super();\r\n        this.state = {\r\n            todoslist:[],\r\n            searchField:'',\r\n        }\r\n    }\r\n    ///input todo title ////////\r\n    ontextChange = (e) => {\r\n        this.setState({searchField:e.target.value})\r\n    }\r\n\r\n    keyPressed = (e) => {\r\n        if(e.key === 'Enter'){\r\n            let val = (this.state.todoslist.length)\r\n            const newTodo = {\r\n                id:val,\r\n                title:this.state.searchField,\r\n                completed:false\r\n            }\r\n            if(this.state.searchField.length > 0){\r\n                this.setState({todoslist:[...this.state.todoslist,newTodo]})\r\n                this.setState({searchField:''})\r\n                e.target.value = ''\r\n            }\r\n        }\r\n    }\r\n\r\n    ////////Add Todo button //////////////////\r\n\r\n    addChange = () => {\r\n        let val = (this.state.todoslist.length)\r\n        const newTodo = {\r\n            id:val,\r\n            title:this.state.searchField,\r\n            completed:false,\r\n        }\r\n        if(this.state.searchField.length > 0){\r\n            this.setState({todoslist:[...this.state.todoslist,newTodo]})\r\n            this.setState({searchField:''})\r\n        }\r\n    }\r\n\r\n    //CheckBox Toggle //////////////////\r\n\r\n    checkChange = (id) => {\r\n        this.setState({todoslist:this.state.todoslist.map((todo,i) => {\r\n            if(todo.id === id){\r\n                todo.completed = !todo.completed\r\n            }\r\n            return todo\r\n        })})\r\n    }\r\n\r\n    /////////////////Delete Todo///////////////////\r\n\r\n    delTodo = (id) => {\r\n        this.setState({todoslist:[...this.state.todoslist.filter(todo => {\r\n            return todo.id !== id\r\n        })]})\r\n    }\r\n\r\n    render(){\r\n        \r\n        return(\r\n            <div className=\"tc\">\r\n                <h1 className=\"bg-light-red f1 pa2 lh-copy\">To-do List</h1>\r\n                <AddToList textChange={this.ontextChange} addChange={this.addChange} keyPressed={this.keyPressed}/>\r\n                <ToDos delTodo={this.delTodo} done={this.done} todoslist={this.state.todoslist} chChange={this.checkChange}/>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default App;","import { CHANGE_SEARCH_FIELD } from './constants';\r\n\r\nconst initialState = {\r\n    searchField:''\r\n}\r\n\r\nexport const searchText = (state=initialState , action={}) => {\r\n    switch(action.type){\r\n        case CHANGE_SEARCH_FIELD:\r\n            return Object.assign({},state,{searchField:action.payload})\r\n        default:\r\n            return state\r\n    }\r\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\nimport 'tachyons';\nimport {createStore, applyMiddleware} from 'redux';\nimport { createLogger } from 'redux-logger';\nimport App from './App';\nimport { Provider } from 'react-redux'; \nimport { searchText } from './reducer';\n\nconst logger = createLogger();\n \nconst store = createStore(searchText, applyMiddleware(logger));\n\n\nReactDOM.render(<Provider store = {store}>\n                    <App />\n                </Provider>\n                ,document.getElementById('root'));\nserviceWorker.unregister();\n","export const CHANGE_SEARCH_FIELD = 'CHANGE_SEARCH_FIELD';\r\nexport const SET_KEY_PRESSED = 'SET_KEY_PRESSED';"],"sourceRoot":""}