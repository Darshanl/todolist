{"version":3,"sources":["serviceWorker.js","component/AddToList/AddToList.js","component/ToDosItem/ToDosItem.js","component/ToDos/ToDos.js","config/config.js","container/App/App.js","index.js"],"names":["Boolean","window","location","hostname","match","AddToList","_ref","addChange","textChange","keyPressed","searchField","react_default","a","createElement","className","style","minWidth","maxWidth","margin","type","onChange","onKeyPress","name","value","placeholder","autoComplete","width","onClick","aria-hidden","ToDosItem","title","chChange","done","user","delTodo","completed","id","textDecoration","backgroundColor","bind","ToDos","todoslist","map","i","component_ToDosItem_ToDosItem","key","val","DB_config","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","ontextChange","e","setState","target","state","length","database","push","set","checkChange","todo","child","remove","app","firebase","initializeApp","ref","_this2","prevNotes","on","snap","splice","component_AddToList_AddToList","component_ToDos_ToDos","Component","ReactDOM","render","container_App_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.e07cd20a.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read http://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport './AddToList.css';\r\n\r\nconst AddToList = ({addChange, textChange, keyPressed, searchField}) => {\r\n    return(\r\n        <div className=\"pa2\" style={{minWidth:'250px', maxWidth:'20%', margin:'auto'}}>\r\n            <input type='text' onChange={textChange} onKeyPress={keyPressed}\r\n            name='searchField'\r\n            className=\"inp pa1 b--none bg-light-gray inputBG\"\r\n            value={searchField}\r\n            placeholder=\"Add..\"\r\n            autoComplete=\"off\"\r\n            style={{width:'70%', margin:'auto'}}\r\n            />\r\n            <button onClick = {addChange}\r\n            className=\"btn pa1 bw1 bg-light-red bg-transparent inputbg\" style={{width:'15%', margin:'auto'}}>\r\n                <i className=\"fa fa-plus-square fas\" aria-hidden=\"true\"></i>\r\n            </button>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default AddToList; ","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport './ToDosItem.css'\r\n\r\nconst ToDosItem = ({title,chChange,done,user,delTodo}) => {\r\n\r\n    const{completed,id} = user;\r\n\r\n    done = () => {\r\n        return {\r\n            textDecoration: completed ? 'line-through' : 'none',\r\n            backgroundColor: completed ? '#785F69' : '#fff'\r\n        }\r\n    }\r\n\r\n    return(\r\n        <div className='tl' style={{width:'90%', margin:'auto'}}>\r\n            <p className=\"bg-light-gray bl bw2 mw8 center b--gray pa2 ma1\" style={done()}>\r\n                <input onChange={chChange.bind(this , id)}\r\n                type=\"checkbox\"\r\n                className=\"mr2\"\r\n                />\r\n                {title}\r\n                <button className=\"delete b--none\"\r\n                onClick={delTodo.bind(this, id)}>\r\n                <i className=\"fa fa-trash\" aria-hidden=\"true\"></i></button>\r\n            </p>\r\n        </div>\r\n    );\r\n}\r\n\r\n\r\nToDosItem.propTypes = {\r\n    user: PropTypes.object.isRequired\r\n}\r\n\r\nexport default ToDosItem; ","import React from 'react';\r\nimport ToDosItem from '../ToDosItem/ToDosItem';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst ToDos = ({done,todoslist,chChange,delTodo}) => {\r\n\r\n    return(\r\n        <div>\r\n            {\r\n                todoslist.map((user,i) => {\r\n                    return (\r\n                        <ToDosItem \r\n                            key={i} \r\n                            title={user.title}\r\n                            id={user.val}\r\n                            chChange={chChange}\r\n                            delTodo={delTodo}\r\n                            user={user}\r\n                            done={done}\r\n                        />\r\n                    )\r\n                })\r\n            }\r\n        </div>\r\n    );\r\n\r\n}\r\n\r\nToDos.propTypes = {\r\n    todoslist: PropTypes.array.isRequired\r\n}\r\n\r\n\r\n\r\nexport default ToDos; ","export const DB_config = {\r\n    apiKey: \"AIzaSyAQ44uhvAkmqO3RjQDuWBVmby1rTXbpRtI\",\r\n    authDomain: \"todolist-c0c12.firebaseapp.com\",\r\n    databaseURL: \"https://todolist-c0c12.firebaseio.com\",\r\n    projectId: \"todolist-c0c12\",\r\n    storageBucket: \"todolist-c0c12.appspot.com\",\r\n    messagingSenderId: \"54002893540\"\r\n};\r\n","import React, {Component} from 'react';\r\nimport './App.css';\r\nimport AddToList from '../../component/AddToList/AddToList';\r\nimport ToDos from '../../component/ToDos/ToDos';\r\nimport { DB_config} from '../../config/config';\r\nimport firebase from 'firebase/app';\r\nimport 'firebase/database'\r\n\r\nclass App extends Component{\r\n    constructor(props){\r\n        super(props);\r\n\r\n        this.app = firebase.initializeApp(DB_config);\r\n        this.database = this.app.database().ref().child('notes')\r\n\r\n        this.state = {\r\n            todoslist:[],\r\n            searchField:'',\r\n        }\r\n    }\r\n    ///input todo title ////////\r\n    ontextChange = (e) => {\r\n        this.setState({searchField:e.target.value})\r\n    }\r\n\r\n    componentWillMount(){\r\n        const prevNotes = this.state.todoslist;\r\n\r\n        this.database.on('child_added', snap => {\r\n            prevNotes.push({\r\n                id:snap.key,\r\n                title:snap.val().searchField,\r\n                completed:false\r\n            })\r\n            this.setState({todoslist:prevNotes})\r\n        })\r\n\r\n        this.database.on('child_removed', snap => {\r\n            for(let i=0; i<prevNotes.length;i++){\r\n                if(prevNotes[i].id === snap.key){\r\n                    prevNotes.splice(i,1);\r\n                }\r\n            }\r\n            this.setState({todoslist:prevNotes})\r\n        })\r\n    }\r\n\r\n    keyPressed = (e) => {\r\n        if(e.key === 'Enter'){\r\n            if(this.state.searchField.length > 0){\r\n                this.database.push().set({searchField:this.state.searchField})\r\n                this.setState({searchField:''})\r\n            }\r\n        }\r\n    }\r\n\r\n    ////////Add Todo button //////////////////\r\n\r\n    addChange = () => {\r\n        if(this.state.searchField.length > 0){\r\n            this.database.push().set({searchField:this.state.searchField})\r\n            this.setState({searchField:''})\r\n        }\r\n    }\r\n\r\n    //CheckBox Toggle //////////////////\r\n\r\n    checkChange = (id) => {\r\n        this.setState({todoslist:this.state.todoslist.map((todo,i) => {\r\n            if(todo.id === id){\r\n                todo.completed = !todo.completed\r\n            }\r\n            return todo\r\n        })})\r\n    }\r\n\r\n    /////////////////Delete Todo///////////////////\r\n\r\n    delTodo = (id) => {\r\n        this.database.child(id).remove();\r\n    }\r\n\r\n    render(){\r\n        \r\n        return(\r\n            <div className=\"tc\">\r\n                <h1 className=\"bg-light-red f1 pa2 lh-copy\">To-do List</h1>\r\n                <div className=\"\" style={{maxWidth:'90%', margin:'auto'}}>\r\n                    <AddToList \r\n                        searchField={this.state.searchField} \r\n                        textChange={this.ontextChange} \r\n                        addChange={this.addChange} \r\n                        keyPressed={this.keyPressed}\r\n                    />\r\n                </div>\r\n                <div style={{width:'500px', maxWidth:'90%', margin:'auto'}}>\r\n                    <ToDos\r\n                        delTodo={this.delTodo} \r\n                        done={this.done} \r\n                        todoslist={this.state.todoslist} \r\n                        chChange={this.checkChange}\r\n                    />\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default App;","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport 'tachyons';\r\nimport App from './container/App/App';\r\n\r\nReactDOM.render(<App />,document.getElementById('root'));\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}